# generated by datamodel-codegen:
#   filename:  dictionary_attribute.json
#   timestamp: 2024-02-16T16:46:55+00:00

from __future__ import annotations

from typing import Any, Dict, Optional

from pydantic import BaseModel, ConfigDict, Field

from . import deprecated


class Enum(BaseModel):
    caption: str = Field(..., description='The caption of this enum value.')
    description: Optional[str] = Field(
        None, description='The description of this enum value.'
    )
    additional_properties: Optional[Any] = Field(None, alias='additionalProperties')


class DictionaryAttribute(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    field_deprecated: Optional[deprecated.Deprecated] = Field(None, alias='@deprecated')
    caption: str = Field(
        ..., description='A short, more specific identifier for this attribute.'
    )
    description: str = Field(..., description='The description of the attribute.')
    enum: Optional[Dict[str, Enum]] = Field(
        None, description='An enumeration of options for this attribute.'
    )
    sibling: Optional[str] = Field(
        None,
        description='Sibling attributes are string attributes paired with a source enum id attribute. If the source attribute maps to a defined enumeration value, the sibling attribute should be populated with the label of the enum. In the case that the source attribute is `Other`, the sibling attribute is populated with a custom label.',
    )
    type: str = Field(..., description='The data type for this attribute.')
    is_array: Optional[bool] = Field(
        None,
        description='A flag used when the attribute represents an array of values rather than a single value.',
    )
