# generated by datamodel-codegen:
#   filename:  attribute.json
#   timestamp: 2024-02-16T16:46:55+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field

from . import deprecated


class EnumModel(BaseModel):
    caption: str = Field(..., description='The caption of this enum value.')
    description: Optional[str] = Field(
        None, description='The description of this enum value.'
    )
    additional_properties: Optional[Any] = Field(None, alias='additionalProperties')


class Group(Enum):
    """
    The group that the attribute is a part of.
    """

    context = 'context'
    classification = 'classification'
    occurrence = 'occurrence'
    primary = 'primary'


class Attribute(BaseModel):
    field_deprecated: Optional[deprecated.Deprecated] = Field(None, alias='@deprecated')
    caption: Optional[str] = Field(
        None, description='A short, more specific identifier for this attribute.'
    )
    description: Optional[str] = Field(
        None, description='The description of the attribute.'
    )
    enum: Optional[Dict[str, EnumModel]] = Field(
        None, description='An enumeration of options for this attribute.'
    )
    group: Optional[Group] = Field(
        None, description='The group that the attribute is a part of.'
    )
    requirement: Optional[str] = Field(
        None,
        description='The requirement placed on the attribute for inclusion in the schema.',
    )
    sibling: Optional[str] = Field(
        None,
        description='Sibling attributes are string attributes paired with a source enum id attribute. If the source attribute maps to a defined enumeration value, the sibling attribute should be populated with the label of the enum. In the case that the source attribute is `Other`, the sibling attribute is populated with a custom label.',
    )
