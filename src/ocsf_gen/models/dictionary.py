# generated by datamodel-codegen:
#   filename:  dictionary.json
#   timestamp: 2024-02-16T20:53:52+00:00

from __future__ import annotations

from typing import Dict, List, Optional

from pydantic import BaseModel, Field, conint, constr

from . import dictionary_attribute
from .attribute import Attribute


class Attributes(Attribute):
    max_len: Optional[conint(ge=0)] = Field(
        None, description='The maximum length of this data type.'
    )
    observable: Optional[conint(ge=0)] = Field(
        None,
        description='Adding `observable` includes this attribute or type in the list of Observable value types. This field must be unique across all usages. See the `type_id` field of the Observable object for more details.',
    )
    range: Optional[List] = Field(
        None,
        description='A range of values that are valid for this data type.',
        max_length=2,
        min_length=2,
    )
    regex: Optional[str] = Field(
        None, description='A regular expression constraint for this data type.'
    )
    type: Optional[str] = Field(
        None,
        description='The data type for this attribute. Should reference another defined type.',
    )
    type_name: Optional[str] = Field(
        None, description='The human-readable name of the data type for this attribute.'
    )
    values: Optional[List] = Field(
        None, description='A set of fixed values for this data type.'
    )


class Types(BaseModel):
    """
    A set of data types defined by the dictionary.
    """

    caption: str = Field(
        ..., description='A short, human friendly name for these data types.'
    )
    description: Optional[str] = Field(
        None, description='A concise description of these data types.'
    )
    attributes: Optional[Dict[constr(pattern=r'^[a-z0-9_]*$'), Attributes]] = Field(
        None,
        description="A set of type attributes defined by the dictionary.  Type attributes must be all lowercase and end in '_t' by convention.",
    )


class Dictionary(BaseModel):
    """
    An attribute dictionary of all available attributes and their types. Event classes are particular sets of attributes from the dictionary.
    """

    description: Optional[str] = Field(
        None, description='A concise description of the dictionary.'
    )
    caption: str = Field(
        ..., description='A short, human friendly name for the dictionary.'
    )
    name: constr(pattern=r'^[a-z0-9_]*$') = Field(
        ...,
        description='A name of the dictionary. It must be a unique name. The name is all lower case letters, combine words using underscore.',
    )
    attributes: Optional[
        Dict[constr(pattern=r'^[a-z0-9_]*$'), dictionary_attribute.DictionaryAttribute]
    ] = Field(None, description='A set of attributes defined by the dictionary.')
    types: Optional[Types] = Field(
        None, description='A set of data types defined by the dictionary.'
    )
